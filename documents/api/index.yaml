openapi: "3.1.0"
info:
  title: "Score Crop API Documentation"
  version: 0.0.0
  contact:
    email: system@licsss.jp
  description: |
    ## APIについて
    基本的にはSPAを実現するために実装しているものであり，一般ユーザーの利用は想定していない。
    なお，リソースに別のリソースが含まれる場合，特別な指定がない限り，登録・編集時はIDを指定する。

    例えば，
    ```json
    {
      exampleId: "5f8d0a9b9d6b9a0017a6d5a0",
      exam: {
        examId: "5f8d0a9b9d6b9a0017a6d5a0",
        title: "test1",
      }
    }
    ```
    のリソースにおいて，登録する際は
    ```json
    {
      exam: {
        examId: "5f8d0a9b9d6b9a0017a6d5a0",
      }
    }
    ```
    と登録する。

    ## リクエスト

    ヘッダの認証情報をもとにAPI通信を行う。

    ### リクエストヘッダ

    | キー         | 値     | 説明             |
    | ------------ | ------ | ---------------- |
    | Accept       | string | application/json |
    | Content-Type | string | application/json |
    | X-NONCE      | string | レスポンスの整合性確認用。任意の文字列。 |
    | X-XSRF-TOKEN | string | API認証キー                 |

    ### 一覧取得リクエストクエリ

    一覧取得リクエストには以下のクエリを指定できる。

    | キー         | 値     | デフォルト値| 説明             |
    | ------------ | ------ | ---- | ---------------- |
    | per       | number | 10 | 1回あたりに取得する件数 |
    | page      | number | 1  | 取得するページ番号 |
    | order     | string | asc | 取得順。asc：古い順に取得。desc：新しい順に取得 |
    | keyword   | string | -   | 検索キーワード |
    | sort      | string | -   | ソート順。語尾に`-`をつけると降順。`,`で複数指定。 |
    | fields    | string | -   | 取得するフィールド。`,`で複数指定。 |

  license:
    name: MIT
    url: "https://github.com/ikepu-tp/laravel-score-crop/blob/main/LICENSE"

servers:
  - url: http://your-project.com/sc/api
    description: 開発環境サーバ

tags:
  - name: "exam"
    x-displayName: テスト
    description: |
      ## テストリソース
      <SchemaDefinition schemaRef="#/components/schemas/ExamResource" />
  - name: exam.answer
    x-displayName: 解答
    description: |
      ## 解答リソース
      <SchemaDefinition schemaRef="#/components/schemas/ExamAnswerResource" />
  - name: exam.answer.image
    x-displayName: 解答画像
    description: |
      ## 解答画像リソース
      <SchemaDefinition schemaRef="#/components/schemas/ExamAnswerImageResource" />
  - name: exam.answer.area
    x-displayName: 解答領域
    description: |
      ## 解答領域リソース
      <SchemaDefinition schemaRef="#/components/schemas/ExamAnswerAreaResource" />

  - name: student
    x-displayName: 生徒
    description: |
      ## 生徒リソース
      <SchemaDefinition schemaRef="#/components/schemas/StudentResource" />
  - name: student.answer
    x-displayName: 生徒解答
    description: |
      ## 生徒解答リソース
      <SchemaDefinition schemaRef="#/components/schemas/StudentAnswerResource" />
  - name: student.answer.image
    x-displayName: 生徒解答画像
    description: |
      ## 生徒解答画像リソース
      <SchemaDefinition schemaRef="#/components/schemas/StudentAnswerImageResource" />
  - name: student.answer.image.trimmed
    x-displayName: 生徒解答画像領域
    description: |
      ## 生徒解答画像領域リソース
      <SchemaDefinition schemaRef="#/components/schemas/StudentAnswerTrimmedImageResource" />

x-tagGroups:
  - name: "テスト"
    tags:
      - exam
      - exam.answer
      - exam.answer.image
      - exam.answer.area

  - name: "生徒"
    tags:
      - student
      - student.answer
      - student.answer.image
      - student.answer.image.trimmed

paths:
  # テスト問題
  /v1/exams:
    get:
      summary: テスト一覧取得
      operationId: exam.index
      deprecated: false
      description: |
        テストの一覧を取得します
      tags:
        - exam
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/PerQuery"
        - $ref: "#/components/parameters/PageQuery"
        - $ref: "#/components/parameters/OrderQuery"
        - $ref: "#/components/parameters/KeywordQuery"
        - $ref: "#/components/parameters/SortQuery"
        - $ref: "#/components/parameters/FieldsQuery"
      responses:
        "200":
          description: |
            テストの一覧取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    type: object
                    properties:
                      meta:
                        $ref: "#/components/schemas/PaginationResource"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ExamResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: テスト登録
      operationId: exam.store
      deprecated: false
      description: |
        テストを登録します
      tags:
        - exam
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamResource"
      responses:
        "201":
          description: |
            テストの登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/exams/{examId}:
    get:
      summary: テスト取得
      operationId: exam.show
      deprecated: false
      description: |
        テストを取得します
      tags:
        - exam
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
      responses:
        "200":
          description: |
            テストの取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    put:
      summary: テスト更新
      operationId: exam.update
      deprecated: false
      description: |
        テストを更新します
      tags:
        - exam
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamResource"
      responses:
        "200":
          description: |
            テストの更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    delete:
      summary: テスト削除
      operationId: exam.destroy
      deprecated: false
      description: |
        テストを削除します
      tags:
        - exam
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
      responses:
        "204":
          description: |
            テストの登録結果
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/exams/{examId}/answers:
    get:
      summary: テスト解答一覧取得
      operationId: exam.answer.index
      deprecated: false
      description: |
        テスト解答の一覧を取得します
      tags:
        - exam.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/PerQuery"
        - $ref: "#/components/parameters/PageQuery"
        - $ref: "#/components/parameters/OrderQuery"
        - $ref: "#/components/parameters/KeywordQuery"
        - $ref: "#/components/parameters/SortQuery"
        - $ref: "#/components/parameters/FieldsQuery"
        - $ref: "#/components/parameters/examId"
      responses:
        "200":
          description: |
            テスト解答の一覧取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    type: object
                    properties:
                      meta:
                        $ref: "#/components/schemas/PaginationResource"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ExamAnswerResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: テスト解答登録
      operationId: exam.answer.store
      deprecated: false
      description: |
        テスト解答を登録します
      tags:
        - exam.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamAnswerResource"
      responses:
        "201":
          description: |
            テスト解答の登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/exams/{examId}/answers/{examAnswerId}:
    get:
      summary: テスト解答取得
      operationId: exam.answer.show
      deprecated: false
      description: |
        テスト解答を取得します
      tags:
        - exam.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
      responses:
        "200":
          description: |
            テスト解答の取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    put:
      summary: テスト解答更新
      operationId: exam.answer.update
      deprecated: false
      description: |
        テスト解答を更新します
      tags:
        - exam.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamAnswerResource"
      responses:
        "200":
          description: |
            テスト解答の更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    delete:
      summary: テスト解答削除
      operationId: exam.answer.destroy
      deprecated: false
      description: |
        テスト解答を削除します
      tags:
        - exam.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
      responses:
        "204":
          description: |
            テスト解答の登録結果
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/exams/{examId}/answers/{examAnswerId}/images:
    get:
      summary: テスト解答画像一覧取得
      operationId: exam.answer.image.index
      deprecated: false
      description: |
        テスト解答画像の一覧を取得します
      tags:
        - exam.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/PerQuery"
        - $ref: "#/components/parameters/PageQuery"
        - $ref: "#/components/parameters/OrderQuery"
        - $ref: "#/components/parameters/KeywordQuery"
        - $ref: "#/components/parameters/SortQuery"
        - $ref: "#/components/parameters/FieldsQuery"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
      responses:
        "200":
          description: |
            テスト解答画像の一覧取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    type: object
                    properties:
                      meta:
                        $ref: "#/components/schemas/PaginationResource"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ExamAnswerImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: テスト解答画像登録
      operationId: exam.answer.image.store
      deprecated: false
      description: |
        テスト解答画像を登録します
      tags:
        - exam.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamAnswerImageResource"
      responses:
        "201":
          description: |
            テスト解答画像の登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/exams/{examId}/answers/{examAnswerId}/images/{examAnswerImageId}:
    get:
      summary: テスト解答画像取得
      operationId: exam.answer.image.show
      deprecated: false
      description: |
        テスト解答画像を取得します
      tags:
        - exam.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
        - $ref: "#/components/parameters/examAnswerImageId"
      responses:
        "200":
          description: |
            テスト解答画像の取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    put:
      summary: テスト解答画像更新
      operationId: exam.answer.image.update
      deprecated: false
      description: |
        テスト解答画像を更新します
      tags:
        - exam.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
        - $ref: "#/components/parameters/examAnswerImageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamAnswerImageResource"
      responses:
        "200":
          description: |
            テスト解答画像の更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    delete:
      summary: テスト解答画像削除
      operationId: exam.answer.image.destroy
      deprecated: false
      description: |
        テスト解答画像を削除します
      tags:
        - exam.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
        - $ref: "#/components/parameters/examAnswerImageId"
      responses:
        "204":
          description: |
            テスト解答画像の登録結果
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/exams/{examId}/answers/{examAnswerId}/images/{examAnswerImageId}/areas:
    get:
      summary: 解答画像エリア一覧取得
      operationId: exam.answer.area.index
      deprecated: false
      description: |
        指定されたテスト解答画像に関連するエリアの一覧を取得します
      tags:
        - exam.answer.area
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
        - $ref: "#/components/parameters/examAnswerImageId"
      responses:
        "200":
          description: |
            解答画像エリアの一覧取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    type: array
                    items:
                      $ref: "#/components/schemas/ExamAnswerAreaResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: 解答画像エリア登録
      operationId: exam.answer.area.store
      deprecated: false
      description: |
        新しい解答画像エリアを登録します
      tags:
        - exam.answer.area
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
        - $ref: "#/components/parameters/examAnswerImageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamAnswerAreaResource"
      responses:
        "201":
          description: |
            解答画像エリアの登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerAreaResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  ? /v1/exams/{examId}/answers/{examAnswerId}/images/{examAnswerImageId}/areas/{examAnswerAreaId}
  : get:
      summary: 解答画像エリア取得
      operationId: exam.answer.area.show
      deprecated: false
      description: |
        指定された解答画像エリアを取得します
      tags:
        - exam.answer.area
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
        - $ref: "#/components/parameters/examAnswerImageId"
        - $ref: "#/components/parameters/examAnswerAreaId"
      responses:
        "200":
          description: |
            解答画像エリアの取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerAreaResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    put:
      summary: 解答画像エリア更新
      operationId: exam.answer.area.update
      deprecated: false
      description: |
        指定された解答画像エリアを更新します
      tags:
        - exam.answer.area
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
        - $ref: "#/components/parameters/examAnswerImageId"
        - $ref: "#/components/parameters/examAnswerAreaId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamAnswerAreaResource"
      responses:
        "200":
          description: |
            解答画像エリアの更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/ExamAnswerAreaResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    delete:
      summary: 解答画像エリア削除
      operationId: exam.answer.area.destroy
      deprecated: false
      description: |
        指定された解答画像エリアを削除します
      tags:
        - exam.answer.area
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/examId"
        - $ref: "#/components/parameters/examAnswerId"
        - $ref: "#/components/parameters/examAnswerImageId"
        - $ref: "#/components/parameters/examAnswerAreaId"
      responses:
        "204":
          description: |
            解答画像エリアの削除結果
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/students:
    get:
      summary: 学生一覧取得
      operationId: student.index
      deprecated: false
      description: |
        学生の一覧を取得します
      tags:
        - student
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/PerQuery"
        - $ref: "#/components/parameters/PageQuery"
        - $ref: "#/components/parameters/OrderQuery"
        - $ref: "#/components/parameters/KeywordQuery"
        - $ref: "#/components/parameters/SortQuery"
        - $ref: "#/components/parameters/FieldsQuery"
      responses:
        "200":
          description: |
            学生の一覧取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    type: object
                    properties:
                      meta:
                        $ref: "#/components/schemas/PaginationResource"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/StudentResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: 学生登録
      operationId: student.store
      deprecated: false
      description: |
        学生を登録します
      tags:
        - student
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentResource"
      responses:
        "201":
          description: |
            学生の登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/students/{studentId}:
    get:
      summary: 学生取得
      operationId: student.show
      deprecated: false
      description: |
        特定の学生情報を取得します
      tags:
        - student
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
      responses:
        "200":
          description: |
            学生の取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"

    put:
      summary: 学生更新
      operationId: student.update
      deprecated: false
      description: |
        特定の学生情報を更新します
      tags:
        - student
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentResource"
      responses:
        "200":
          description: |
            学生の更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"

    delete:
      summary: 学生削除
      operationId: student.destroy
      deprecated: false
      description: |
        特定の学生情報を削除します
      tags:
        - student
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
      responses:
        "204":
          description: |
            学生の削除成功
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/students/{studentId}/answers:
    get:
      summary: 生徒の回答一覧取得
      operationId: student.answer.index
      deprecated: false
      description: |
        指定された生徒の回答一覧を取得します
      tags:
        - student.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/PerQuery"
        - $ref: "#/components/parameters/PageQuery"
        - $ref: "#/components/parameters/OrderQuery"
        - $ref: "#/components/parameters/KeywordQuery"
        - $ref: "#/components/parameters/SortQuery"
        - $ref: "#/components/parameters/FieldsQuery"
      responses:
        "200":
          description: |
            生徒の回答一覧取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    type: object
                    properties:
                      meta:
                        $ref: "#/components/schemas/PaginationResource"
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/StudentAnswerResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: 生徒の回答登録
      operationId: student.answer.store
      deprecated: false
      description: |
        指定された生徒の新しい回答を登録します
      tags:
        - student.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentAnswerResource"
      responses:
        "201":
          description: |
            生徒の回答登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/students/{studentId}/answers/{studentAnswerId}:
    get:
      summary: 生徒の回答取得
      operationId: student.answer.show
      deprecated: false
      description: |
        指定された生徒の特定の回答を取得します
      tags:
        - student.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
      responses:
        "200":
          description: |
            生徒の回答取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    put:
      summary: 生徒の回答更新
      operationId: student.answer.update
      deprecated: false
      description: |
        指定された生徒の特定の回答を更新します
      tags:
        - student.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentAnswerResource"
      responses:
        "200":
          description: |
            生徒の回答更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    delete:
      summary: 生徒の回答削除
      operationId: student.answer.destroy
      deprecated: false
      description: |
        指定された生徒の特定の回答を削除します
      tags:
        - student.answer
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
      responses:
        "204":
          description: |
            生徒の回答削除結果
        "400":
          $ref: "#/components/responses/ErrorResponse"
  /v1/students/{studentId}/answers/{studentAnswerId}/images:
    get:
      summary: 生徒の回答画像一覧取得
      operationId: student.answer.image.index
      deprecated: false
      description: |
        指定された生徒の回答に関連する画像の一覧を取得します
      tags:
        - student.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
      responses:
        "200":
          description: |
            生徒の回答画像一覧取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/StudentAnswerImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: 生徒の回答画像登録
      operationId: student.answer.image.store
      deprecated: false
      description: |
        指定された生徒の回答に新しい画像を登録します
      tags:
        - student.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentAnswerImageResource"
      responses:
        "201":
          description: |
            生徒の回答画像登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  ? /v1/students/{studentId}/answers/{studentAnswerId}/images/{studentAnswerImageId}
  : get:
      summary: 生徒の回答画像取得
      operationId: student.answer.image.show
      deprecated: false
      description: |
        指定された生徒の回答の特定の画像を取得します
      tags:
        - student.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
        - $ref: "#/components/parameters/studentAnswerImageId"
      responses:
        "200":
          description: |
            生徒の回答画像取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    put:
      summary: 生徒の回答画像更新
      operationId: student.answer.image.update
      deprecated: false
      description: |
        指定された生徒の回答の特定の画像を更新します
      tags:
        - student.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
        - $ref: "#/components/parameters/studentAnswerImageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentAnswerImageResource"
      responses:
        "200":
          description: |
            生徒の回答画像更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    delete:
      summary: 生徒の回答画像削除
      operationId: student.answer.image.destroy
      deprecated: false
      description: |
        指定された生徒の回答の特定の画像を削除します
      tags:
        - student.answer.image
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
        - $ref: "#/components/parameters/studentAnswerImageId"
      responses:
        "204":
          description: |
            生徒の回答画像削除結果
        "400":
          $ref: "#/components/responses/ErrorResponse"
  ? /v1/students/{studentId}/answers/{studentAnswerId}/images/{studentAnswerImageId}/trimmed
  : get:
      summary: 生徒のトリミングされた回答画像一覧取得
      operationId: student.answer.image.trimmed.index
      deprecated: false
      description: |
        指定された生徒の回答に関連するトリミングされた画像の一覧を取得します
      tags:
        - student.answer.image.trimmed
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
        - $ref: "#/components/parameters/studentAnswerImageId"
      responses:
        "200":
          description: |
            生徒のトリミングされた回答画像一覧取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/StudentAnswerTrimmedImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"

    post:
      summary: 生徒のトリミングされた回答画像登録
      operationId: student.answer.image.trimmed.store
      deprecated: false
      description: |
        指定された生徒の回答に新しいトリミングされた画像を登録します
      tags:
        - student.answer.image.trimmed
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
        - $ref: "#/components/parameters/studentAnswerImageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentAnswerTrimmedImageResource"
      responses:
        "201":
          description: |
            生徒のトリミングされた回答画像登録結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerTrimmedImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
  ? /v1/students/{studentId}/answers/{studentAnswerId}/images/{studentAnswerImageId}/trimmed/{studentAnswerTrimmedImageId}
  : get:
      summary: 生徒のトリミングされた回答画像取得
      operationId: student.answer.image.trimmed.show
      deprecated: false
      description: |
        指定された生徒の回答の特定のトリミングされた画像を取得します
      tags:
        - student.answer.image.trimmed
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
        - $ref: "#/components/parameters/studentAnswerImageId"
        - $ref: "#/components/parameters/studentAnswerTrimmedImageId"
      responses:
        "200":
          description: |
            生徒のトリミングされた回答画像取得結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerTrimmedImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    put:
      summary: 生徒のトリミングされた回答画像更新
      operationId: student.answer.image.trimmed.update
      deprecated: false
      description: |
        指定された生徒の回答の特定のトリミングされた画像を更新します
      tags:
        - student.answer.image.trimmed
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
        - $ref: "#/components/parameters/studentAnswerImageId"
        - $ref: "#/components/parameters/studentAnswerTrimmedImageId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudentAnswerTrimmedImageResource"
      responses:
        "200":
          description: |
            生徒のトリミングされた回答画像更新結果
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: "#/components/schemas/SuccessResponseStatus"
                  payloads:
                    $ref: "#/components/schemas/StudentAnswerTrimmedImageResource"
        "400":
          $ref: "#/components/responses/ErrorResponse"
    delete:
      summary: 生徒のトリミングされた回答画像削除
      operationId: student.answer.image.trimmed.destroy
      deprecated: false
      description: |
        指定された生徒の回答の特定のトリミングされた画像を削除します
      tags:
        - student.answer.image.trimmed
      security:
        - cookieAuth: []
      parameters:
        - $ref: "#/components/parameters/AcceptHeader"
        - $ref: "#/components/parameters/ContentTypeHeader"
        - $ref: "#/components/parameters/TokenHeader"
        - $ref: "#/components/parameters/NonceHeader"
        - $ref: "#/components/parameters/studentId"
        - $ref: "#/components/parameters/studentAnswerId"
        - $ref: "#/components/parameters/studentAnswerImageId"
        - $ref: "#/components/parameters/studentAnswerTrimmedImageId"
      responses:
        "204":
          description: |
            生徒のトリミングされた回答画像削除結果
        "400":
          $ref: "#/components/responses/ErrorResponse"

components:
  parameters:
    # リクエストヘッダ
    AcceptHeader:
      name: Accept
      in: header
      schema:
        type: string
        example: application/json
        default: application/json
      required: true
    ContentTypeHeader:
      name: Content-Type
      in: header
      schema:
        type: string
        example: application/json
        default: application/json
      required: true
    TokenHeader:
      name: X-XSRF-TOKEN
      in: header
      schema:
        type: string
        example: eyJpdiI6IkNQUWRjbVRhNldGM1JyQThUU~~~~~iIn0=
      required: true
    NonceHeader:
      name: X-NONCE
      in: header
      schema:
        type: string
        example: 1ec2a3c0
        maxLength: 32
      required: true
    # Indexクエリ系
    PerQuery:
      name: per
      in: query
      schema:
        type: number
        example: 10
        default: 10
      required: false
    PageQuery:
      name: page
      in: query
      schema:
        type: number
        example: 1
        default: 1
      required: false
    OrderQuery:
      name: order
      in: query
      description: |
        取得順
        |key|note|
        |-|-|
        |asc|古い順に取得|
        |desc|新しい順に取得|
      schema:
        type: string
        example: asc
        default: asc
      required: false
    KeywordQuery:
      name: keyword
      in: query
      description: キーワード検索
      schema:
        type: string
        example: keyword
      required: false
    SortQuery:
      name: sort
      in: query
      description: |
        ソート順。語尾に`-`をつけると降順。`,`で複数指定。
      schema:
        type: string
        example: keyword
      required: false
    FieldsQuery:
      name: fields
      in: query
      description: |
        取得するフィールド。`,`で複数指定。
      schema:
        type: string
        example: keyword
      required: false

    examId:
      name: examId
      in: path
      description: テストID
      required: true
      schema:
        type: string
        example: "5f8d0a9b9d6b9a0017a6d5a0"
    examAnswerId:
      name: examAnswerId
      in: path
      description: 解答ID
      required: true
      schema:
        type: string
        example: "5f8d0a9b9d6b9a0017a6d5a0"
    examAnswerImageId:
      name: examAnswerImageId
      in: path
      description: 解答ID
      required: true
      schema:
        type: string
        example: "5f8d0a9b9d6b9a0017a6d5a0"
    examAnswerAreaId:
      name: examAnswerAreaId
      in: path
      description: 解答領域ID
      required: true
      schema:
        type: string
        example: "5f8d0a9b9d6b9a0017a6d5a0"
    studentId:
      name: studentId
      in: path
      description: 生徒ID
      required: true
      schema:
        type: string
        example: "5f8d0a9b9d6b9a0017a6d5a0"
    studentAnswerId:
      name: studentAnswerId
      in: path
      description: 生徒解答ID
      required: true
      schema:
        type: string
        example: "5f8d0a9b9d6b9a0017a6d5a0"
    studentAnswerImageId:
      name: studentAnswerImageId
      in: path
      description: 生徒解答画像ID
      required: true
      schema:
        type: string
        example: "5f8d0a9b9d6b9a0017a6d5a0"
    studentAnswerTrimmedImageId:
      name: studentAnswerTrimmedImageId
      in: path
      description: 生徒解答画像領域ID
      required: true
      schema:
        type: string
        example: "5f8d0a9b9d6b9a0017a6d5a0"
  responses:
    ErrorResponse:
      description: エラー
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                $ref: "#/components/schemas/ErrorResponseStatus"
              error:
                $ref: "#/components/schemas/ErrorResource"
  schemas:
    SuccessResponseStatus:
      type: object
      description: レスポンスステータス
      properties:
        result:
          type: boolean
          description: 処理結果
          example: true
        code:
          type: integer
          description: |
            レスポンスコード
            | 値     | タイトル              | 説明                                 |
            | ------ | --------------------- | ------------------------------------ |
            | 200    | OK                    | 正常に処理完了                       |
            | 201    | CREATED               | リソースの作成が完了                 |
            | 204    | NO CONTENT            | 処理完了。送信コンテンツはなし       |
          example: 200
        nonce:
          type: string
          description: 送信時にヘッダに指定した任意の値
          example: a0b1c2d3e4f5
    ErrorResponseStatus:
      type: object
      description: レスポンスステータス
      properties:
        result:
          type: boolean
          description: 処理結果
          example: false
        code:
          type: integer
          description: |
            レスポンスコード
            | 値     | タイトル              | 説明                                 |
            | ------ | --------------------- | ------------------------------------ |
            | 400    | BAD REQUEST           | クライアントエラー                   |
            | 401    | UNAUTHORIEZED         | 認証失敗                             |
            | 403    | FORBITTEN             | 権限なし                         |
            | 404    | NOT FOUND             | 存在しない                       |
            | 405    | METHOD NOT ALLOWED    | 許可されていないメソッド             |
            | 406    | NOT ACCEPTABLE        | 受付不可能な値，バリデーションエラー |
            | 409    | CONFLICT              | 他のデータと競合                     |
            | 429    | TOO MANY REQUESTS     | 過剰リクエスト                      |
            | 500    | INTERNAL SERVER ERROR | サーバエラー，スクリプトエラー       |
            | 503    | SERVICE UNAVAILABLE   | サービス利用不可                     |
          example: 400
        nonce:
          type: string
          description: 送信時にヘッダに指定した任意の値
          example: a0b1c2d3e4f5
    ErrorResource:
      type: object
      description: エラーリソース
      properties:
        abstract:
          type: string
          description: エラー概要
          example: ERROR
        title:
          type: string
          description: エラータイトル
          example: エラー
        code:
          type: integer
          description: |
            エラーコード
            | エラーコード | タイトル                    | 説明                                 |
            | ------ | --------------------------- | ------------------------------------ |
            | 400000 | BAD REQUEST                 | クライアントエラー                   |
            | 401000 | UNAUTHORIEZED               | 認証失敗                             |
            | 401001 | NOT MATCH EMAIL OR PASSWORD | 認証失敗                             |
            | 401002 | NOT MATCH PASSWORD          | 認証失敗                             |
            | 401003 | NOT MATCH CSRF-TOKEN        | CSRFトークン不一致                   |
            | 401004 | UNUSABLE                    | 利用不可                             |
            | 403000 | FORBITTEN                   | アクセス不可                         |
            | 403001 | EDIT FORBITTEN              | 編集不可                             |
            | 403002 | CREATE FORBITTEN            | 登録不可                             |
            | 403003 | DELETE FORBITTEN            | 削除不可                             |
            | 404000 | NOT FOUND                   | 存在しないパス                       |
            | 404001 | NOT EXIST RECORD            | 存在しないレコード                   |
            | 405000 | METHOD NOT ALLOWED          | 許可されていないメソッド             |
            | 406000 | NOT ACCEPTABLE              | 受付不可能な値，バリデーションエラー |
            | 406001 | LACK PARAMETERS             | パラメータ不足                       |
            | 406002 | OVER PARAMETERS             | 過剰パラメータ                       |
            | 406003 | VALIDATION ERROR            | 入力値エラー                         |
            | 406004 | LACK HEADER                 | ヘッダ不足                           |
            | 406005 | NOT ACCEPT QUERIES          | クエリ不可                           |
            | 406006 | NOT VERIFIED EMAIL          | メールアドレス未認証                 |
            | 406007 | NOT ACCEPT HEADER           | ヘッダ不可                           |
            | 409000 | CONFLICT                    | 他のデータと競合                     |
            | 429000 | TOO MANY REQUESTS           | 過剰リクエスト                       |
            | 500000 | INTERNAL SERVER ERROR       | サーバエラー                         |
            | 500001 | SCRIPT ERROR                | スクリプトエラー                     |
            | 500002 | SAVE FAILED                 | 保存失敗                             |
            | 503000 | SERVICE UNAVAILABLE         | サービス利用不可                     |
          example: 400000
        messages:
          type: array
          description: エラーメッセージ
          items:
            type: string
            example: エラーメッセージ
    PaginationResource:
      type: object
      description: ページネーションリソース
      properties:
        currentPage:
          type: "number"
          description: 現在のページ
          example: 1
        lastPage:
          type: "number"
          example: 1
          description: 最終ページ
        getLength:
          type: "number"
          example: 10
          description: 取得件数
        length:
          type: "number"
          example: 10
          description: 件数
        per:
          type: "number"
          example: 10
          description: 取得予定件数
    FileResource:
      type: object
      properties:
        fileId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        name:
          type: string
          example: "test1"
          maxLength: 255
        url:
          type: string
          example: "https://your-project.com/path/to/file"
        mime_type:
          type: string
          example: "application/pdf"
        created_at:
          type: string
          example: "2020-10-20T00:00:00.000000Z"
          readOnly: true
        updated_at:
          type: string
          example: "2020-10-20T00:00:00.000000Z"
          readOnly: true
    ExamResource:
      type: object
      required:
        - title
      properties:
        scExamId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        title:
          type: string
          example: "test1"
          maxLength: 255
        description:
          type:
            - string
            - "null"
          example: "this is a test."
          maxLength: 1000
    ExamAnswerResource:
      type: object
      properties:
        scAnswerId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        pdf:
          readOnly: true
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FileResource"
        pdfFileId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          writeOnly: true
    ExamAnswerImageResource:
      type: object
      required:
        - page
      properties:
        scAnswerImageId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        page:
          type: number
          example: 1
        image:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/FileResource"
        imageFileId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          writeOnly: true
    ExamAnswerAreaResource:
      type: object
      required:
        - big_number
        - score
        - x
        - "y"
        - width
        - height
      properties:
        scAnswerAreaId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        big_number:
          type: number
          example: 1
        middle_number:
          type:
            - number
            - "null"
          example: 1
        small_number:
          type:
            - number
            - "null"
          example: 1
        score:
          type: number
          example: 1
          maximum: 100
        x:
          type: number
          example: 0
        y:
          type: number
          example: 0
        width:
          type: number
          example: 100
        height:
          type: number
          example: 100
    StudentResource:
      type: object
      required:
        - grade
        - class
        - number
        - name
      properties:
        scStudentId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        group_id:
          type:
            - string
            - number
            - "null"
          example: "5f8d0a9b9d6b9a0017a6d5a0"
        grade:
          type: number
          example: 1
        class:
          type: number
          example: 1
        number:
          type: number
          example: 1
        name:
          type: string
          example: "name test"
          maxLength: 255
        ruby_name:
          type:
            - string
            - "null"
          example: "name test"
          format: ^[ぁ-んー\s　]*$
    StudentAnswerResource:
      type: object
      properties:
        scStudentAnswerId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        pdf:
          readOnly: true
          oneOf:
            - type: "null"
            - $ref: "#/components/schemas/FileResource"
        pdfFileId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          writeOnly: true
    StudentAnswerImageResource:
      type: object
      required:
        - imageFileId
      properties:
        scStudentAnswerImageId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        student:
          $ref: "#/components/schemas/StudentResource"
        image:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/FileResource"
        imageFileId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          writeOnly: true
    StudentAnswerTrimmedImageResource:
      type: object
      properties:
        scStudentAnswerTrimmedImageId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          readOnly: true
        answer_area:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/ExamAnswerAreaResource"
        image:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/FileResource"
        imageFileId:
          type: string
          example: "5f8d0a9b9d6b9a0017a6d5a0"
          writeOnly: true
        score:
          type: number
          example: 1
          maximum: 100
        feedback:
          type:
            - string
            - "null"
          example: "feedback"
          maxLength: 255

  securitySchemes:
    cookieAuth:
      name: X-XSRF-TOKEN
      type: apiKey
      in: "cookie"
